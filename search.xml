<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo + Github</title>
    <url>/post/Github%20+%20Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本blog利用 Hexo + Github 搭建个人博客，内容包含基本工具（Node.js、Git、Github、Hexo）、利用Hexo进行发布、修改、删除文章</p>
<span id="more"></span>

<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>在开始一切之前，你必须已经：</p>
<ul>
<li>有一个github账号，没有的话去注册一个</li>
<li>安装了node.js、npm</li>
<li>安装了git for windows（或者其它git客户端）</li>
</ul>
<p>本文所使用的环境：</p>
<ul>
<li>Windows11</li>
<li><span class="exturl" data-url="bWFpbHRvOiYjMTEwOyYjeDZmOyYjeDY0OyYjMTAxOyYjeDJlOyYjMTA2OyYjMTE1OyYjeDQwOyYjeDc2OyYjNDk7JiM1NDsmI3gyZTsmI3gzMTsmI3gzNDsmI3gyZTsmIzUwOw==">&#110;&#x6f;&#x64;&#101;&#x2e;&#106;&#115;&#x40;&#x76;&#49;&#54;&#x2e;&#x31;&#x34;&#x2e;&#50;<i class="fa fa-external-link-alt"></i></span> —— git命令行输入<code>node -v</code></li>
<li><span class="exturl" data-url="bWFpbHRvOiYjeDY3OyYjMTA1OyYjMTE2OyYjeDQwOyYjeDMyOyYjNDY7JiN4MzM7JiM1MTsmI3gyZTsmI3gzMDsmI3gyZTsmI3g3NzsmIzEwNTsmIzExMDsmI3g2NDsmI3g2ZjsmIzExOTsmI3g3MzsmI3gyZTsmIzUwOw==">&#x67;&#105;&#116;&#x40;&#x32;&#46;&#x33;&#51;&#x2e;&#x30;&#x2e;&#x77;&#105;&#110;&#x64;&#x6f;&#119;&#x73;&#x2e;&#50;<i class="fa fa-external-link-alt"></i></span> —— git命令行输入<code>git version</code></li>
<li><span class="exturl" data-url="bWFpbHRvOiYjMTA0OyYjeDY1OyYjeDc4OyYjeDZmOyYjeDQwOyYjNTQ7JiN4MmU7JiN4MzE7JiN4MmU7JiN4MzA7">&#104;&#x65;&#x78;&#x6f;&#x40;&#54;&#x2e;&#x31;&#x2e;&#x30;<i class="fa fa-external-link-alt"></i></span> —— git命令行输入<code>hexo -v</code>或<code>hexo version</code></li>
<li><span class="exturl" data-url="bWFpbHRvOiYjMTEwOyYjeDY1OyYjMTIwOyYjMTE2OyYjNjQ7JiN4Mzc7JiN4MmU7JiN4Mzg7JiM0NjsmIzQ4Ow==">&#110;&#x65;&#120;&#116;&#64;&#x37;&#x2e;&#x38;&#46;&#48;<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><ul>
<li>安装Node.js</li>
<li>添加国内镜像源对npm加速</li>
<li>安装Git</li>
<li>注册Github</li>
<li>安装Hexo</li>
<li>连接Github与本地</li>
</ul>
<h1 id="文章基本操作"><a href="#文章基本操作" class="headerlink" title="文章基本操作"></a>文章基本操作</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 新建文章 </span><br><span class="line">hexo new post &quot;article title&quot; </span><br><span class="line"># 生成静态页面 </span><br><span class="line">hexo g </span><br><span class="line"># 本地预览 </span><br><span class="line">hexo s </span><br><span class="line"># 部署到网站 </span><br><span class="line">hexo d</span><br><span class="line"># 清空缓存并生成新的静态页面 </span><br><span class="line">hexo clean &amp;&amp; hexo g</span><br><span class="line"></span><br><span class="line">修改文章：修改对应文章内容，然后执行命令 </span><br><span class="line">hexo d -g </span><br><span class="line"></span><br><span class="line">删除文章：</span><br><span class="line">删除目录 source\_posts 下对应文章文件，然后执行命令 hexo d -g 即可。</span><br></pre></td></tr></table></figure>

<h1 id="常见配置修改"><a href="#常见配置修改" class="headerlink" title="常见配置修改"></a>常见配置修改</h1><h2 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h2><p>在旧版本中的post_wordcount配置似乎已经不可用，因此需要使用symbols_count_time替代</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 卸载原有依赖 不卸载对新插件有影响</span><br><span class="line">npm uninstall hexo-wordcount</span><br><span class="line"># 安装新依赖</span><br><span class="line">npm i hexo-symbols-count-time</span><br><span class="line"></span><br><span class="line">新的配置在symbols_count_time下：配置文件在主题下，themes\next\_config.yml</span><br><span class="line">symbols_count_time:</span><br><span class="line">  # 换行显示字数统计和阅读市场</span><br><span class="line">  separated_meta: true</span><br><span class="line">  # 文章底部显示</span><br><span class="line">  item_text_post: true</span><br><span class="line">  # 博客底部显示 默认为false</span><br><span class="line">  item_text_total: true</span><br></pre></td></tr></table></figure>

<h2 id="隐藏网页底部-powered-By-Hexo-x2F-强力驱动"><a href="#隐藏网页底部-powered-By-Hexo-x2F-强力驱动" class="headerlink" title="隐藏网页底部 powered By Hexo &#x2F; 强力驱动"></a>隐藏网页底部 powered By Hexo &#x2F; 强力驱动</h2><p>打开 themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.swig，找到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.footer.powered.enable %&#125;</span><br><span class="line">&lt;div class=&quot;powered-by&quot;&gt;&#123;#</span><br><span class="line">#&#125;&#123;&#123; __(&#x27;footer.powered&#x27;, &#x27;&lt;a class=&quot;theme-link&quot; target=&quot;_blank&quot;&#x27; + nofollow + &#x27; href=&quot;https://hexo.io&quot;&gt;Hexo&lt;/a&gt;&#x27;) &#125;&#125;&#123;% if theme.footer.powered.version %&#125; v&#123;&#123; hexo_env(&#x27;version&#x27;) &#125;&#125;&#123;% endif %&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% if theme.footer.powered.enable and theme.footer.theme.enable %&#125;</span><br><span class="line">&lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% if theme.footer.theme.enable %&#125;</span><br><span class="line">&lt;div class=&quot;theme-info&quot;&gt;&#123;#</span><br><span class="line">#&#125;&#123;&#123; __(&#x27;footer.theme&#x27;) &#125;&#125; – &#123;#</span><br><span class="line">#&#125;&lt;a class=&quot;theme-link&quot; target=&quot;_blank&quot;&#123;&#123; nofollow &#125;&#125; href=&quot;https://theme-next.org&quot;&gt;&#123;#</span><br><span class="line">#&#125;NexT.&#123;&#123; theme.scheme &#125;&#125;&#123;#</span><br><span class="line">#&#125;&lt;/a&gt;&#123;% if theme.footer.theme.version %&#125; v&#123;&#123; version &#125;&#125;&#123;% endif %&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">把这段代码首尾分别加上：&lt;!-- 和--&gt;，或者直接删除</span><br></pre></td></tr></table></figure>

<h2 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h2><p>next 主题自带<strong>四种样式</strong>。<br>在主题配置文件<code>/next/_config.yml</code>中查找：<code>scheme</code>，找到如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br><span class="line">选择你喜欢的一种样式，去掉前面的 #，其他主题前加上 # 即可</span><br></pre></td></tr></table></figure>

<h2 id="代码块复制选项"><a href="#代码块复制选项" class="headerlink" title="代码块复制选项"></a>代码块复制选项</h2><p>在主题配置文件<code>next/_config.yml</code>中，搜索 codeblock，找到如下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  highlight_theme: normal</span><br><span class="line">  copy_button:  # 设置是否开启代码块复制按钮</span><br><span class="line">    enable: true</span><br><span class="line">    show_result: true  # 是否显示复制成功信息</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style:</span><br></pre></td></tr></table></figure>

<h2 id="草稿-私密博客"><a href="#草稿-私密博客" class="headerlink" title="草稿 私密博客"></a>草稿 私密博客</h2><blockquote>
<p>草稿相当于很多博客都有的“私密文章”功能。<br>$ hexo new draft “draft”<br>会在source&#x2F;_drafts目录下生成一个new-draft.md文件。但是这个文件不被显示在页面上，链接也访问不到。<br>也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到_drafts目录之中。</p>
</blockquote>
<h2 id="目录信息"><a href="#目录信息" class="headerlink" title="目录信息"></a>目录信息</h2><p>在主题配置文件<code>next/_config.yml</code>中，可以是设置展开所有目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Table of Contents in the Sidebar</span><br><span class="line"># Front-matter variable (unsupport wrap expand_all).</span><br><span class="line">toc:</span><br><span class="line">  enable: true</span><br><span class="line">  # Automatically add list number to toc.</span><br><span class="line">  number: true</span><br><span class="line">  # If true, all words will placed on next lines if header width longer then sidebar width.</span><br><span class="line">  wrap: false</span><br><span class="line">  # If true, all level of TOC in a post will be displayed, rather than the activated part of it.</span><br><span class="line">  expand_all: true</span><br><span class="line">  # Maximum heading depth of generated toc.</span><br><span class="line">  max_depth: 6</span><br></pre></td></tr></table></figure>

<h2 id="提升Hexo-NexT主题加载速度"><a href="#提升Hexo-NexT主题加载速度" class="headerlink" title="提升Hexo NexT主题加载速度"></a>提升Hexo NexT主题加载速度</h2><p>网站加载速度是影响搜索引擎排名的一个重要因素。<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vc3BlZWQvcGFnZXNwZWVkL2luc2lnaHRzLw=="># Google Page Speed Insight<i class="fa fa-external-link-alt"></i></span> 是个很好的网页性能分析工具，可以根据它的分析结果有针对性地对网页进行优化。</p>
<p><strong>优化方案</strong></p>
<p>主要尝试了下面几种方案，按效果排列，把无效的放在了后面。 <strong>关闭动效</strong> 减少动画在Mobile上的优化效果最为明显，是肉眼可见的速度提升。关闭的方法也极为简单，修改NexT的配置文件，<code>next/_config.yml</code>中，将<code>motion</code>的<code>enable</code>置为<code>false</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Use Animate.css to animate everything.</span><br><span class="line"># For more information: https://animate.style</span><br><span class="line">motion:</span><br><span class="line">  enable: false</span><br><span class="line">  async: false</span><br></pre></td></tr></table></figure>

<p>在手机上对比测试了一下，加上这个动画，页面加载确实有明显卡顿。猜想原因是多了一个动画js的render-blocking依赖，手机端的算力也偏弱。</p>
<p>把页脚的icon动效也一并去掉了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  # Specify the year when the site was setup. If not defined, current year will be used.</span><br><span class="line">  #since: 2021</span><br><span class="line"></span><br><span class="line">  # Icon between year and copyright info.</span><br><span class="line">  icon:</span><br><span class="line">    # Icon name in Font Awesome. See: https://fontawesome.com/icons</span><br><span class="line">    name: fa fa-heart</span><br><span class="line">    # If you want to animate the icon, set it to true.</span><br><span class="line">    animated: false</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux find 命令</title>
    <url>/post/Linux-find-%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>find命令</strong>用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p>
<span id="more"></span>

<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p><code>find (选项) (参数)</code></p>
<p>查找目录：find &#x2F;（查找范围） -name ‘查找关键字’ -type d<br>查找文件：find &#x2F;（查找范围） -name 查找关键字 -print</p>
<h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-amin&lt;分钟&gt;：查找在指定时间曾被存取过的文件或目录，单位以分钟计算；</span><br><span class="line">-anewer&lt;参考文件或目录&gt;：查找其存取时间较指定文件或目录的存取时间更接近现在的文件或目录；</span><br><span class="line">-atime&lt;24小时数&gt;：查找在指定时间曾被存取过的文件或目录，单位以24小时计算；</span><br><span class="line">-cmin&lt;分钟&gt;：查找在指定时间之时被更改过的文件或目录；</span><br><span class="line">-cnewer&lt;参考文件或目录&gt;查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；</span><br><span class="line">-ctime&lt;24小时数&gt;：查找在指定时间之时被更改的文件或目录，单位以24小时计算；</span><br><span class="line">-daystart：从本日开始计算时间；</span><br><span class="line">-depth：从指定目录下最深层的子目录开始查找；</span><br><span class="line">-expty：寻找文件大小为0 Byte的文件，或目录下没有任何子目录或文件的空目录；</span><br><span class="line">-<span class="built_in">exec</span>&lt;执行指令&gt;：假设find指令的回传值为True，就执行该指令；</span><br><span class="line">-<span class="literal">false</span>：将find指令的回传值皆设为False；</span><br><span class="line">-fls&lt;列表文件&gt;：此参数的效果和指定“-<span class="built_in">ls</span>”参数类似，但会把结果保存为指定的列表文件；</span><br><span class="line">-follow：排除符号连接；</span><br><span class="line">-fprint&lt;列表文件&gt;：此参数的效果和指定“-<span class="built_in">print</span>”参数类似，但会把结果保存成指定的列表文件；</span><br><span class="line">-fprint0&lt;列表文件&gt;：此参数的效果和指定“-print0”参数类似，但会把结果保存成指定的列表文件；</span><br><span class="line">-fprintf&lt;列表文件&gt;&lt;输出格式&gt;：此参数的效果和指定“-<span class="built_in">printf</span>”参数类似，但会把结果保存成指定的列表文件；</span><br><span class="line">-fstype&lt;文件系统类型&gt;：只寻找该文件系统类型下的文件或目录；</span><br><span class="line">-gid&lt;群组识别码&gt;：查找符合指定之群组识别码的文件或目录；</span><br><span class="line">-group&lt;群组名称&gt;：查找符合指定之群组名称的文件或目录；</span><br><span class="line">-<span class="built_in">help</span>或——<span class="built_in">help</span>：在线帮助；</span><br><span class="line">-ilname&lt;范本样式&gt;：此参数的效果和指定“-lname”参数类似，但忽略字符大小写的差别；</span><br><span class="line">-iname&lt;范本样式&gt;：此参数的效果和指定“-name”参数类似，但忽略字符大小写的差别；</span><br><span class="line">-inum&lt;inode编号&gt;：查找符合指定的inode编号的文件或目录；</span><br><span class="line">-ipath&lt;范本样式&gt;：此参数的效果和指定“-path”参数类似，但忽略字符大小写的差别；</span><br><span class="line">-iregex&lt;范本样式&gt;：此参数的效果和指定“-regexe”参数类似，但忽略字符大小写的差别；</span><br><span class="line">-links&lt;连接数目&gt;：查找符合指定的硬连接数目的文件或目录；</span><br><span class="line">-iname&lt;范本样式&gt;：指定字符串作为寻找符号连接的范本样式；</span><br><span class="line">-<span class="built_in">ls</span>：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出；</span><br><span class="line">-maxdepth&lt;目录层级&gt;：设置最大目录层级；</span><br><span class="line">-mindepth&lt;目录层级&gt;：设置最小目录层级；</span><br><span class="line">-mmin&lt;分钟&gt;：查找在指定时间曾被更改过的文件或目录，单位以分钟计算；</span><br><span class="line">-mount：此参数的效果和指定“-xdev”相同；</span><br><span class="line">-mtime&lt;24小时数&gt;：查找在指定时间曾被更改过的文件或目录，单位以24小时计算；</span><br><span class="line">-name&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；</span><br><span class="line">-newer&lt;参考文件或目录&gt;：查找其更改时间较指定文件或目录的更改时间更接近现在的文件或目录；</span><br><span class="line">-nogroup：找出不属于本地主机群组识别码的文件或目录；</span><br><span class="line">-noleaf：不去考虑目录至少需拥有两个硬连接存在；</span><br><span class="line">-nouser：找出不属于本地主机用户识别码的文件或目录；</span><br><span class="line">-ok&lt;执行指令&gt;：此参数的效果和指定“-<span class="built_in">exec</span>”类似，但在执行指令之前会先询问用户，若回答“y”或“Y”，则放弃执行命令；</span><br><span class="line">-path&lt;范本样式&gt;：指定字符串作为寻找目录的范本样式；</span><br><span class="line">-perm&lt;权限数值&gt;：查找符合指定的权限数值的文件或目录；</span><br><span class="line">-<span class="built_in">print</span>：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为每列一个名称，每个名称前皆有“./”字符串；</span><br><span class="line">-print0：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式为全部的名称皆在同一行；</span><br><span class="line">-<span class="built_in">printf</span>&lt;输出格式&gt;：假设find指令的回传值为Ture，就将文件或目录名称列出到标准输出。格式可以自行指定；</span><br><span class="line">-prune：不寻找字符串作为寻找文件或目录的范本样式;</span><br><span class="line">-regex&lt;范本样式&gt;：指定字符串作为寻找文件或目录的范本样式；</span><br><span class="line">-size&lt;文件大小&gt;：查找符合指定的文件大小的文件；</span><br><span class="line">-<span class="literal">true</span>：将find指令的回传值皆设为True；</span><br><span class="line">-typ&lt;文件类型&gt;：只寻找符合指定的文件类型的文件；</span><br><span class="line">-uid&lt;用户识别码&gt;：查找符合指定的用户识别码的文件或目录；</span><br><span class="line">-used&lt;日数&gt;：查找文件或目录被更改之后在指定时间曾被存取过的文件或目录，单位以日计算；</span><br><span class="line">-user&lt;拥有者名称&gt;：查找符和指定的拥有者名称的文件或目录；</span><br><span class="line">-version或——version：显示版本信息；</span><br><span class="line">-xdev：将范围局限在先行的文件系统中；</span><br><span class="line">-xtype&lt;文件类型&gt;：此参数的效果和指定“-<span class="built_in">type</span>”参数类似，差别在于它针对符号连接检查。</span><br></pre></td></tr></table></figure>

<h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>起始目录：查找文件的起始目录</p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="根据文件或者正则表达式进行匹配"><a href="#根据文件或者正则表达式进行匹配" class="headerlink" title="根据文件或者正则表达式进行匹配"></a>根据文件或者正则表达式进行匹配</h2><p>列出当前目录及子目录下所有文件和文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find .</span><br></pre></td></tr></table></figure>

<p>在<code>/home</code>目录下查找以.txt结尾的文件名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find /home -name &quot;*.txt&quot;</span><br></pre></td></tr></table></figure>

<p>同上，但忽略大小写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find /home -iname &quot;*.txt&quot;</span><br></pre></td></tr></table></figure>

<p>当前目录及子目录下查找所有以.txt和.pdf结尾的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . \( -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; \)</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">find . -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot; </span><br></pre></td></tr></table></figure>

<p>匹配文件路径或者文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find /usr/ -path &quot;*local*&quot;</span><br></pre></td></tr></table></figure>

<p>基于正则表达式匹配文件路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -regex &quot;.*\(\.txt\|\.pdf\)$&quot;</span><br></pre></td></tr></table></figure>

<p>同上，但忽略大小写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -iregex &quot;.*\(\.txt\|\.pdf\)$&quot;</span><br></pre></td></tr></table></figure>

<h2 id="否定参数"><a href="#否定参数" class="headerlink" title="否定参数"></a>否定参数</h2><p>找出&#x2F;home下不是以.txt结尾的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find /home ! -name &quot;*.txt&quot;</span><br></pre></td></tr></table></figure>

<h2 id="根据文件类型进行搜索"><a href="#根据文件类型进行搜索" class="headerlink" title="根据文件类型进行搜索"></a>根据文件类型进行搜索</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type 类型参数</span><br></pre></td></tr></table></figure>

<p>类型参数列表：</p>
<ul>
<li><strong>f</strong> 普通文件</li>
<li><strong>l</strong> 符号连接</li>
<li><strong>d</strong> 目录</li>
<li><strong>c</strong> 字符设备</li>
<li><strong>b</strong> 块设备</li>
<li><strong>s</strong> 套接字</li>
<li><strong>p</strong> Fifo</li>
</ul>
<h2 id="基于目录深度搜索"><a href="#基于目录深度搜索" class="headerlink" title="基于目录深度搜索"></a>基于目录深度搜索</h2><p>向下最大深度限制为3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -maxdepth 3 -type f</span><br></pre></td></tr></table></figure>

<p>搜索出深度距离当前目录至少2个子目录的所有文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -mindepth 2 -type f</span><br></pre></td></tr></table></figure>

<h2 id="根据文件时间戳进行搜索"><a href="#根据文件时间戳进行搜索" class="headerlink" title="根据文件时间戳进行搜索"></a>根据文件时间戳进行搜索</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f 时间戳</span><br></pre></td></tr></table></figure>

<p>UNIX&#x2F;Linux文件系统每个文件都有三种时间戳：</p>
<ul>
<li><strong>访问时间</strong>（-atime&#x2F;天，-amin&#x2F;分钟）：用户最近一次访问时间。</li>
<li><strong>修改时间</strong>（-mtime&#x2F;天，-mmin&#x2F;分钟）：文件最后一次修改时间。</li>
<li><strong>变化时间</strong>（-ctime&#x2F;天，-cmin&#x2F;分钟）：文件数据元（例如权限等）最后一次修改时间。</li>
</ul>
<p>搜索最近七天内被访问过的所有文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -atime -7</span><br></pre></td></tr></table></figure>

<p>搜索恰好在七天前被访问过的所有文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -atime 7</span><br></pre></td></tr></table></figure>

<p>搜索超过七天内被访问过的所有文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -atime +7</span><br></pre></td></tr></table></figure>

<p>搜索访问时间超过10分钟的所有文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -amin +10</span><br></pre></td></tr></table></figure>

<p>找出比<span class="exturl" data-url="aHR0cDovL21hbi5saW51eGRlLm5ldC9maWxl">file<i class="fa fa-external-link-alt"></i></span>.log修改时间更长的所有文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -newer file.log</span><br></pre></td></tr></table></figure>

<h2 id="根据文件大小进行匹配"><a href="#根据文件大小进行匹配" class="headerlink" title="根据文件大小进行匹配"></a>根据文件大小进行匹配</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -size 文件大小单元</span><br></pre></td></tr></table></figure>

<p>文件大小单元：</p>
<ul>
<li><strong>b</strong> —— 块（512字节）</li>
<li><strong>c</strong> —— 字节</li>
<li><strong>w</strong> —— 字（2字节）</li>
<li><strong>k</strong> —— 千字节</li>
<li><strong>M</strong> —— 兆字节</li>
<li><strong>G</strong> —— 吉字节</li>
</ul>
<p>搜索大于10KB的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -size +10k</span><br></pre></td></tr></table></figure>

<p>搜索小于10KB的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -size -10k</span><br></pre></td></tr></table></figure>

<p>搜索等于10KB的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -size 10k</span><br></pre></td></tr></table></figure>

<p>搜索当前文件夹下大于1G的占用磁盘空间的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -size +1G -exec du -h &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<h2 id="删除匹配文件"><a href="#删除匹配文件" class="headerlink" title="删除匹配文件"></a>删除匹配文件</h2><p>删除当前目录下所有.txt文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -name &quot;*.txt&quot; -delete</span><br></pre></td></tr></table></figure>

<h2 id="根据文件权限-x2F-所有权进行匹配"><a href="#根据文件权限-x2F-所有权进行匹配" class="headerlink" title="根据文件权限&#x2F;所有权进行匹配"></a>根据文件权限&#x2F;所有权进行匹配</h2><p>当前目录下搜索出权限为777的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -perm 777</span><br></pre></td></tr></table></figure>

<p>找出当前目录下权限不是644的<span class="exturl" data-url="aHR0cDovL21hbi5saW51eGRlLm5ldC9waHA=">php<i class="fa fa-external-link-alt"></i></span>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -name &quot;*.php&quot; ! -perm 644</span><br></pre></td></tr></table></figure>

<p>找出当前目录用户tom拥有的所有文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -user tom</span><br></pre></td></tr></table></figure>

<p>找出当前目录用户组sunk拥有的所有文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -group sunk</span><br></pre></td></tr></table></figure>

<h2 id="借助-exec选项与其他命令结合使用"><a href="#借助-exec选项与其他命令结合使用" class="headerlink" title="借助-exec选项与其他命令结合使用"></a>借助<code>-exec</code>选项与其他命令结合使用</h2><p>找出当前目录下所有root的文件，并把所有权更改为用户tom</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find .-type f -user root -exec chown tom &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>上例中，**{}** 用于与**-exec**选项结合使用来匹配所有文件，然后会被替换为相应的文件名。</p>
<p>找出自己家目录下所有的.txt文件并删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find $HOME/. -name &quot;*.txt&quot; -ok rm &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>上例中，**-ok<strong>和</strong>-exec**行为一样，不过它会给出提示，是否执行相应的操作。</p>
<p>查找&#x2F;home&#x2F;sftpuser目录下7天之前的.tar文件，并删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find /home/sftpuser -mtime +7 -name &quot;*.tar&quot; -exec rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>查找当前目录下所有.txt文件并把他们拼接起来写入到all.txt文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -name &quot;*.txt&quot; -exec cat &#123;&#125; \;&gt; all.txt</span><br></pre></td></tr></table></figure>

<p>将30天前的.log文件移动到old目录中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -mtime +30 -name &quot;*.log&quot; -exec cp &#123;&#125; old \;</span><br></pre></td></tr></table></figure>

<p>找出当前目录下所有.txt文件并以“File:文件名”的形式打印出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -type f -name &quot;*.txt&quot; -exec printf &quot;File: %s\n&quot; &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<p>因为单行命令中-exec参数中无法使用多个命令，以下方法可以实现在-exec之后接受多条命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-exec ./text.sh &#123;&#125; \;</span><br></pre></td></tr></table></figure>

<h2 id="搜索但跳出指定的目录"><a href="#搜索但跳出指定的目录" class="headerlink" title="搜索但跳出指定的目录"></a>搜索但跳出指定的目录</h2><p>查找当前目录或者子目录下所有.txt文件，但是跳过子目录sk</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -path &quot;./sk&quot; -prune -o -name &quot;*.txt&quot; -print</span><br></pre></td></tr></table></figure>

<h2 id="find其他技巧收集"><a href="#find其他技巧收集" class="headerlink" title="find其他技巧收集"></a>find其他技巧收集</h2><p>要列出所有长度为零的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find . -empty</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux 命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux netstat ss lsof 命令</title>
    <url>/post/Linux-netstat-ss-lsof-%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Address already in use</code>这个提示,想必大家遇到过,怎么能快速找到问题并解决呢?下面有几种姿势可以了解一下.在对网络连接或特定于应用程序的问题进行故障排除时，首先要检查的事情之一应该是系统上实际使用了哪些端口，以及哪个应用程序正在侦听特定的端口。本文介绍了如何使用<code>netstat</code>，<code>ss</code>和<code>lsof</code>命令找出哪些服务正在侦听哪些端口。</p>
<span id="more"></span>

<h1 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h1><p><code>netstat</code>是一个命令行工具，可以提供有关网络连接的信息。</p>
<p>要列出所有正在侦听的TCP或UDP端口，包括使用端口的服务和套接字状态，请使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -tunlp</span><br></pre></td></tr></table></figure>

<p>此命令中使用的选项具有以下含义：</p>
<ul>
<li><code>-t</code>-显示TCP端口。</li>
<li><code>-u</code> -显示UDP端口。</li>
<li><code>-n</code> -显示数字地址而不是解析主机。</li>
<li><code>-l</code> -仅显示监听端口。</li>
<li><code>-p</code> -显示侦听器进程的PID和名称。</li>
</ul>
<p>输出将如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Proto Recv-Q Send-Q Local Address   Foreign Address     State       PID/Program name      </span><br><span class="line">tcp        0      0 0:22              0:*               LISTEN      445/sshd              </span><br><span class="line">tcp        0      0 0:25              0:*               LISTEN      929/master            </span><br><span class="line">tcp6       0      0 :::3306           ::*               LISTEN      534/mysqld            </span><br><span class="line">tcp6       0      0 :::80             :::*              LISTEN      515/apache2           </span><br><span class="line">tcp6       0      0 :::22             :::*              LISTEN      445/sshd              </span><br><span class="line">tcp6       0      0 :::25             :::*              LISTEN      929/master            </span><br><span class="line">tcp6       0      0 :::33060          :::*              LISTEN      534/mysqld            </span><br><span class="line">udp        0      0 0:68              0:*                           966/dhclient  </span><br></pre></td></tr></table></figure>

<p>在我们的案例中，重要的几列是：</p>
<ul>
<li><code>Proto</code>-套接字使用的协议。</li>
<li><code>Local Address</code> -进程侦听的IP地址和端口号。</li>
<li><code>PID/Program name</code> -PID和进程名称。</li>
</ul>
<p>如果要过滤结果，请使用 grep命令。例如，要查找在TCP端口3366上侦听的进程，你可以输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[puaiuc@t3 ~]$ netstat -tnlp | grep :3366</span><br><span class="line">(Not all processes could be identified, non-owned process info</span><br><span class="line"> will not be shown, you would have to be root to see it all.)</span><br><span class="line">tcp6       0      0 :::33660                :::*                    LISTEN      2285/mysqld         </span><br><span class="line">tcp6       0      0 :::33661                :::*                    LISTEN      2285/mysqld         </span><br><span class="line">tcp6       0      0 :::3366                 :::*                    LISTEN      2285/mysqld   </span><br></pre></td></tr></table></figure>

<p>如果输出为空，则表示端口上没有监听。</p>
<p>你也可以根据条件过滤列表，例如PID，协议，状态等。</p>
<p><code>netstat</code>已过时，被<code>ss</code>和 <code>ip</code> 取代，但它仍然是检查网络连接的最常用命令。</p>
<h1 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h1><p>检查监听端口</p>
<p><code>ss</code>是新的<code>netstat</code>。它缺少<code>netstat</code>的某些功能，但是公开了更多的TCP状态，并且速度稍快。命令选项基本相同，因此从<code>netstat</code>到<code>ss</code>的转换并不困难。</p>
<p>要使用<code>ss</code>获取所有监听端口的列表，请输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ss -tunlp</span><br></pre></td></tr></table></figure>

<p>输出与<code>netstat</code>报告的输出几乎相同：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">State    Recv-Q   Send-Q     Local Address:Port      Peer Address:Port                                                                                          </span><br><span class="line">LISTEN   0        128              0:22             0:*      users:((&quot;sshd&quot;,pid=445,fd=3))                                                          </span><br><span class="line">LISTEN   0        100              0:25             0:*      users:((&quot;master&quot;,pid=929,fd=13))                                                       </span><br><span class="line">LISTEN   0        128                    *:3306                 *:*      users:((&quot;mysqld&quot;,pid=534,fd=30))                                                       </span><br><span class="line">LISTEN   0        128                    *:80                   *:*      users:((&quot;apache2&quot;,pid=765,fd=4),(&quot;apache2&quot;,pid=764,fd=4),(&quot;apache2&quot;,pid=515,fd=4))     </span><br><span class="line">LISTEN   0        128                 [::]:22                [::]:*      users:((&quot;sshd&quot;,pid=445,fd=4))                                                          </span><br><span class="line">LISTEN   0        100                 [::]:25                [::]:*      users:((&quot;master&quot;,pid=929,fd=14))                                                       </span><br><span class="line">LISTEN   0        70                     *:33060                *:*      users:((&quot;mysqld&quot;,pid=534,fd=33))  </span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[puaiuc@t3 ~]$ ss -lnpt src :3366</span><br><span class="line">State      Recv-Q Send-Q                                                Local Address:Port                                                               Peer Address:Port              </span><br><span class="line">LISTEN     0      214                                                              :::3366                                                                         :::*                   users:((&quot;mysqld&quot;,pid=2285,fd=27))</span><br><span class="line">[puaiuc@t3 ~]$ ss -anpt src :3366</span><br><span class="line">State      Recv-Q Send-Q                                                Local Address:Port                                                               Peer Address:Port              </span><br><span class="line">LISTEN     0      214                                                              :::3366                                                                         :::*                   users:((&quot;mysqld&quot;,pid=2285,fd=27))</span><br></pre></td></tr></table></figure>

<h1 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h1><p>检查监听端口</p>
<p><code>lsof</code>是功能强大的命令行应用程序，可提供有关进程打开的文件的信息。</p>
<p>在Linux中，所有内容都是文件。你可以将套接字视为写入网络的文件。</p>
<p>要获取具有<code>lsof</code>的所有侦听TCP端口的列表，请输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsof -nP -iTCP -sTCP:LISTEN </span><br></pre></td></tr></table></figure>

<p>使用的选项如下:</p>
<ul>
<li><code>-n</code>-不要将端口号转换为端口名称。</li>
<li><code>-p</code> -不解析主机名，显示数字地址。</li>
</ul>
<p><code>-iTCP -sTCP:LISTEN</code> -仅显示TCP状态为LISTEN的网络文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COMMAND   PID     USER   FD   TYPE DEVICE SIZE/OFF NODE NAME  </span><br><span class="line">sshd      445     root    3u  IPv4  16434      0t0  TCP *:22 (LISTEN)  </span><br><span class="line">sshd      445     root    4u  IPv6  16445      0t0  TCP *:22 (LISTEN)  </span><br><span class="line">apache2   515     root    4u  IPv6  16590      0t0  TCP *:80 (LISTEN)  </span><br><span class="line">mysqld    534    mysql   30u  IPv6  17636      0t0  TCP *:3306 (LISTEN)  </span><br><span class="line">mysqld    534    mysql   33u  IPv6  19973      0t0  TCP *:33060 (LISTEN)  </span><br><span class="line">apache2   764 www-data    4u  IPv6  16590      0t0  TCP *:80 (LISTEN)  </span><br><span class="line">apache2   765 www-data    4u  IPv6  16590      0t0  TCP *:80 (LISTEN)  </span><br><span class="line">master    929     root   13u  IPv4  19637      0t0  TCP *:25 (LISTEN)  </span><br><span class="line">master    929     root   14u  IPv6  19638      0t0  TCP *:25 (LISTEN)  </span><br></pre></td></tr></table></figure>

<p>大多数输出列名称都是不言自明的:</p>
<ul>
<li><code>COMMAND</code>，<code>PID</code>，<code>USER</code>-运行与端口关联的程序的名称，PID和用户。</li>
<li><code>NAME</code> -端口号。</li>
</ul>
<p>要查找正在侦听特定端口（例如端口<code>3306</code>）的进程，可以使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lsof -nP -iTCP:3306 -sTCP:LISTEN  </span><br></pre></td></tr></table></figure>

<p>输出显示MySQL服务器使用端口<code>3306</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COMMAND PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME  </span><br><span class="line">mysqld  534 mysql   30u  IPv6  17636      0t0  TCP *:3306 (LISTEN)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux 命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux top 命令</title>
    <url>/post/Linux-top-%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><strong>top</strong>动态查看进程变化，监控 linux 的系统状况，是 Linux 下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于 Windows 的任务管理器。</p>
<span id="more"></span>

<h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><p><img src="/post/Linux-top-%E5%91%BD%E4%BB%A4/image-20220425152440575.png"></p>
<h2 id="统计信息区"><a href="#统计信息区" class="headerlink" title="统计信息区"></a>统计信息区</h2><p>前五行是系统整体的统计信息。</p>
<p>第一行是任务队列信息，同 uptime 命令的执行结果。其内容如下：</p>
<p><code>top - 15:22:47 up 637 days,  5:45,  7 users,  load average: 4.16, 4.32, 4.22</code></p>
<blockquote>
<p>15:22:47  当前时间</p>
<p>up 637 days  系统运行时间</p>
<p>5:45</p>
<p>7 user  当前登录用户数</p>
<p>load average: 4.16, 4.32, 4.22  系统负载，即任务队列的平均长度。</p>
<p>三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。</p>
</blockquote>
<p>第二、三行为进程和 CPU 的信息。当有多个 CPU 时，这些内容可能会超过两行。内容如下：</p>
<p><code>Tasks: 306 total,   2 running, 304 sleeping,   0 stopped,   0 zombie %Cpu(s):  5.1 us,  2.2 sy,  0.0 ni, 67.3 id, 25.2 wa,  0.0 hi,  0.2 si,  0.1 st</code></p>
<blockquote>
<p>Tasks:</p>
<p>total  进程总数</p>
<p>running  正在运行的进程数</p>
<p>sleeping  睡眠的进程数</p>
<p>stopped  停止的进程数</p>
<p>zombie  僵尸进程数</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cpu(s): </span><br><span class="line">us   用户空间占用CPU百分比 </span><br><span class="line">sy   内核空间占用CPU百分比 </span><br><span class="line">ni   用户进程空间内改变过优先级的进程占用CPU百分比 </span><br><span class="line">id   空闲CPU百分比 </span><br><span class="line">wa   等待输入输出的CPU时间百分比 </span><br><span class="line">hi   硬中断（Hardware IRQ）占用CPU的百分比</span><br><span class="line">si   软中断（Software Interrupts）占用CPU的百分比</span><br><span class="line">st   (Steal time) 是当 hypervisor 服务另一个虚拟处理器的时候，虚拟 CPU 等待实际 CPU 的时间的百分比。</span><br></pre></td></tr></table></figure>
<p><code>KiB Mem : 16431256 total,   512096 free,  2374144 used, 13545016 buff/cache</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mem: </span><br><span class="line">total   物理内存总量 </span><br><span class="line">free   空闲内存总量 </span><br><span class="line">used   使用的物理内存总量 </span><br><span class="line">buff/cache   用作内核缓存的内存量</span><br></pre></td></tr></table></figure>
<p><code>KiB Swap:  4063228 total,  2733612 free,  1329616 used. 13387600 avail Mem </code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Swap: </span><br><span class="line">total   交换区总量 </span><br><span class="line">free   空闲交换区总量 </span><br><span class="line">used   使用的交换区总量</span><br><span class="line">avail Mem 缓冲的交换区总量</span><br></pre></td></tr></table></figure>

<p>内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖，该数值即为这些内容已存在于内存中的交换区的大小。</p>
<p>相应的内存再次被换出时可不必再对交换区写入。</p>
<h2 id="进程信息区"><a href="#进程信息区" class="headerlink" title="进程信息区"></a>进程信息区</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                              </span><br><span class="line">22651 polkitd   20   0 2797836 413508   7324 S   9.0  2.5   2634:26 mysqld                                                                                                               </span><br><span class="line"> 3707 root      20   0  303468  76968    820 S   5.6  0.5  53865:39 snmpd                                                                                                                </span><br><span class="line">23993 1997      20   0 2252716  15708  10780 S   2.7  0.1  94:51.81 zabbix_server                                                                                                        </span><br><span class="line">24031 1997      20   0 2253288  27508  20768 S   1.0  0.2 216:17.00 zabbix_server        </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">PID 进程id </span><br><span class="line">PPID 父进程id </span><br><span class="line">RUSER Real user name </span><br><span class="line">d UID 进程所有者的用户id </span><br><span class="line">e USER 进程所有者的用户名 </span><br><span class="line">f GROUP 进程所有者的组名 </span><br><span class="line">g TTY 启动进程的终端名。不是从终端启动的进程则显示为 ? </span><br><span class="line">h PR 优先级 </span><br><span class="line">i NI nice值。负值表示高优先级，正值表示低优先级 </span><br><span class="line">j P 最后使用的CPU，仅在多CPU环境下有意义 </span><br><span class="line">k %CPU 上次更新到现在的CPU时间占用百分比 </span><br><span class="line">l TIME 进程使用的CPU时间总计，单位秒 </span><br><span class="line">m TIME+ 进程使用的CPU时间总计，单位1/100秒 </span><br><span class="line">n %MEM 进程使用的物理内存百分比 </span><br><span class="line">o VIRT 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES </span><br><span class="line">p SWAP 进程使用的虚拟内存中，被换出的大小，单位kb。</span><br><span class="line">q RES 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA </span><br><span class="line">r CODE 可执行代码占用的物理内存大小，单位kb </span><br><span class="line">s DATA 可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb </span><br><span class="line">t SHR 共享内存大小，单位kb </span><br><span class="line">u nFLT 页面错误次数 </span><br><span class="line">v nDRT 最后一次写入到现在，被修改过的页面数。</span><br><span class="line">w S 进程状态。</span><br><span class="line">D=不可中断的睡眠状态 </span><br><span class="line">R=运行 </span><br><span class="line">S=睡眠 </span><br><span class="line">T=跟踪/停止 </span><br><span class="line">Z=僵尸进程 </span><br><span class="line">x COMMAND 命令名/命令行 </span><br><span class="line">y WCHAN 若该进程在睡眠，则显示睡眠中的系统函数名 </span><br><span class="line">z Flags 任务标志，参考 sched.h</span><br></pre></td></tr></table></figure>

<p>默认情况下仅显示比较重要的 PID、USER、PR、NI、VIRT、RES、SHR、S、% CPU、% MEM、TIME+、COMMAND 列。可以通过下面的快捷键来更改显示内容。</p>
<h2 id="top-命令选项"><a href="#top-命令选项" class="headerlink" title="top 命令选项"></a>top 命令选项</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top [-] [d] [p] [q] [C] [S] [s] [n] </span><br><span class="line">-d 后跟秒数，指定每两次屏幕信息刷新之间的时间间隔，表示进程界面更新时间（默认为5秒）。如：将top进程表在/tmp/top.txt中打印2次。</span><br><span class="line"> top -b -n 2 &gt; /tmp/top.txt</span><br><span class="line">-p进程ID    如：查看进程号为1的进程。top -p 1</span><br><span class="line">-q 该选项将使top没有任何延迟的进行刷新。如果调用程序有超级用户权限，那么top将以尽可能高的优先级运行。</span><br><span class="line">-S 指定累计模式 </span><br><span class="line">-s 使top命令在安全模式中运行。这将去除交互命令所带来的潜在危险。</span><br><span class="line">-i 使top不显示任何闲置或者僵死进程。</span><br><span class="line">-c 显示整个命令行而不只是显示命令名</span><br></pre></td></tr></table></figure>

<h2 id="Top-命令常见的操作"><a href="#Top-命令常见的操作" class="headerlink" title="Top 命令常见的操作"></a>Top 命令常见的操作</h2><p>1、 2500 毫秒刷新一次 TOP 内容，总共 5 次，输出内容存放到 performace.txt 文件中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top -b -d 2.5 -n 5 &gt; performace.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：要将内容输出到文件中，必须使用 - b，表示批处理选项</p>
</blockquote>
<p>2、TOP 命令如何快速按 % CPU、% MEM、TIME + 列排序</p>
<p>a) % CPU：使用大写字母按键：P<br>b) % MEM：使用大写字母按键：M<br>c) T IME + 使用大写字母按键：T</p>
<blockquote>
<p>注：TOP 默认排序为倒序，如果确实需要升序排序，可以使用大写字母按键：R</p>
</blockquote>
<p>3、TOP 命令中显示其它列值、将两列互换等</p>
<p>a) 选择显示列或隐藏列：使用小写字母按键：f<br>c) 交换列显示顺序：使用小写字母按键：o<br>b) 选择需要排序的列：使用大写字母按键：F</p>
<h2 id="CPU-steal-time"><a href="#CPU-steal-time" class="headerlink" title="CPU steal time"></a>CPU steal time</h2><p>如果你想要部署虚拟环境（例如：Amazon EC2），steal time就是你想要关注的性能指标之一。如果这个指标的数值很高，那么说明机器状态非常糟糕。</p>
<p>虚拟机（VM）会与虚拟环境的宿主机上的多个虚拟机实例共享物理资源。其中之一共享的就是CPU时间切片。如果你的VM的物理机虚拟比是1&#x2F;4， 那么它的CPU使用率不会限制于25%的CPU时间切片－它能够使用超过它设置的虚拟比。（有别于内存的使用，内存大小是严格控制的）。</p>
<p>可以使用Linux 的 TOP 命令来看到实时的一些性能指标。</p>
<p>两个你可能较为熟悉的是 %id(空闲 百分比) 和 %wa(I&#x2F;O 等待 百分比)。如果 %id 很低， 那么说明CPU的工作负载很大并且没有多少计算负载能力剩余。如果 %wa 很高，则说明瓶 CPU 处于等待计算的状态，但是正在等待I&#x2F;O活动的完成(类似 从数据库中获取存储在 磁盘上 的一行数据)。</p>
<p>%st（percent steal time） 是CPU展示的最后一个性能指标。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux 命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 常用命令</title>
    <url>/post/Linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>日常工作中总结，积累的一些常用Linux命令</p>
<span id="more"></span>

<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/redhat-release								<span class="comment">#查看centos系统的版本</span></span><br><span class="line"><span class="built_in">cat</span> /proc/version									<span class="comment">#查看Linux版本</span></span><br><span class="line"><span class="built_in">uname</span> -a											<span class="comment">#显示系统信息</span></span><br><span class="line"><span class="built_in">uname</span> -n 											<span class="comment">#查看主机名</span></span><br><span class="line"><span class="built_in">uname</span> -r											<span class="comment">#查看Linux内核信息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ulimit</span> -a  	 										<span class="comment">#显示当前系统所有的limit资源信息</span></span><br><span class="line"><span class="built_in">ulimit</span> -u    										<span class="comment">#用户最大可用的进程数</span></span><br><span class="line"><span class="built_in">ulimit</span> -n 	 										<span class="comment">#查看进程可以打开的最大文件描述符的数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#selinux</span></span><br><span class="line">getenforce                                          <span class="comment">#查看是否开启</span></span><br><span class="line">setenforce 0                                        <span class="comment">#临时关闭</span></span><br><span class="line"></span><br><span class="line">systemctl status firewalld						    <span class="comment">#查看firewall状态</span></span><br><span class="line">systemctl start firewalld.service				    <span class="comment">#启动firewall</span></span><br><span class="line">systemctl stop firewalld.service				    <span class="comment">#停止firewall</span></span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service				    <span class="comment">#禁止firewall开机启动</span></span><br><span class="line"></span><br><span class="line">service iptables status   						    <span class="comment">#查看iptables防火墙</span></span><br><span class="line">service iptables stop							    <span class="comment">#关闭iptables防火墙</span></span><br><span class="line">systemctl stop iptables.service                     <span class="comment">#关闭iptables防火墙</span></span><br><span class="line">systemctl <span class="built_in">disable</span> iptables.service                  <span class="comment">#禁止iptables开机启动</span></span><br><span class="line">iptables -L -n								        <span class="comment">#查看当前iptables规则</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">history</span>  											<span class="comment">#查看历史命令</span></span><br><span class="line">netstat -tunlp										<span class="comment">#查看已使用的端口</span></span><br><span class="line">netstat -tunlp | grep 82				 			<span class="comment">#查看某个端口是否被占用</span></span><br><span class="line">netstat -ntpl |grep 3306							<span class="comment">#查询端口被占用的id</span></span><br><span class="line">ss -ntl|grep :1521                                  <span class="comment">#查看某个端口是否被占用</span></span><br><span class="line"><span class="built_in">df</span> -h    											<span class="comment">#查看硬件信息</span></span><br><span class="line"><span class="built_in">du</span> -sh *                                      		<span class="comment">#查看当前目录下各个文件及目录占用空间大小</span></span><br><span class="line">free -h  											<span class="comment">#查看内存</span></span><br><span class="line">ps -ef												<span class="comment">#查看所有的进程信息</span></span><br><span class="line">ps aux												<span class="comment">#查看进程的详细信息	</span></span><br><span class="line"></span><br><span class="line">top</span><br><span class="line">lscpu												<span class="comment">#查看cpu信息</span></span><br><span class="line">sar -d -p 1 20										<span class="comment">#查看磁盘读写</span></span><br><span class="line">iostat -dxk 1 20				          			<span class="comment">#查看磁盘读写</span></span><br><span class="line"></span><br><span class="line">$ lsblk -d -o name,rota                             <span class="comment">#服务器查看硬盘是SSD还是SATA</span></span><br><span class="line">NAME ROTA</span><br><span class="line">vda     1</span><br><span class="line">vdb     1</span><br><span class="line">vdc     1</span><br><span class="line">0说明是SSD硬盘；如果返回结果为1，说明是转动盘HDD类的硬盘，SATA。</span><br><span class="line"></span><br><span class="line"><span class="built_in">date</span> <span class="string">&#x27;+%Y%m%d%H%M%S&#x27;</span>   <span class="comment">#打印时间20210425212152</span></span><br><span class="line"></span><br><span class="line">watch -n 1 docker ps      <span class="comment">#每隔一秒刷新一次docker ps</span></span><br><span class="line"></span><br><span class="line">ll | <span class="built_in">wc</span> -l       <span class="comment">#  | wc -l   统计数量</span></span><br><span class="line"><span class="built_in">nl</span> regular_express.txt      <span class="comment">#查看文件并显示行号</span></span><br><span class="line"></span><br><span class="line">passwd root											<span class="comment">#修改root密码</span></span><br><span class="line">groupadd puaiuc                                     <span class="comment">#加属主</span></span><br><span class="line"><span class="built_in">chown</span> -R puaiuc:puaiuc nc4.1.0						<span class="comment">#更改文件属主</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /home/packageA /home/packageB		    	    <span class="comment">#将一个文件夹复制到另一个文件夹下</span></span><br><span class="line"></span><br><span class="line">ssh -p 22022 puaiuc@10.19.88.38            		    <span class="comment">#ssh连接服务器</span></span><br><span class="line">ctrl + D										    <span class="comment">#退出ssh连接</span></span><br><span class="line"></span><br><span class="line">sftp -P 22022 puaiuc@10.1.234.67 				                            <span class="comment">#服务器传文件</span></span><br><span class="line">scp -r -P 22022 puaiuc@10.19.83.59:/home/puaiuc/nc4.1.0/nc .                <span class="comment">#服务器传文件</span></span><br><span class="line">scp -r  nmweihu@10.221.172.58:/ora_data1/images/rc_test .</span><br><span class="line">scp  nmweihu@10.221.172.58:/ora_data1/images/rc_test/nc-ui-portal.zip .</span><br><span class="line">scp  nmweihu@10.221.172.58:/ora_data1/images/nc/nginx.tar .</span><br><span class="line">scp -r -P 22022 puaiuc@10.19.88.71:/home/puaiuc/nc/nc4.1.0 . 				<span class="comment">#传文件夹</span></span><br><span class="line">scp  airc@192.168.51.238:/home/airc/docker-compose/hlsf/rc-env.sh .</span><br><span class="line">scp -P 22022 ./docker-compose.yml  puaiuc@10.19.88.59:/opt/ksq    <span class="comment">#将本机文件传输至目标主机</span></span><br><span class="line"></span><br><span class="line">vi ~/.bash_profile                                  <span class="comment">#修改当前用户环境变量</span></span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install                                <span class="comment">#编译安装</span></span><br><span class="line"></span><br><span class="line">Linux环境下使用yum安装zip和unzip</span><br><span class="line">yum install zip</span><br><span class="line">yum install unzip</span><br><span class="line"></span><br><span class="line">zip test.zip zip.txt							<span class="comment">#压缩文件</span></span><br><span class="line">zip -r soft.zip soft/							<span class="comment">#压缩目录</span></span><br><span class="line">unzip xx.zip   									<span class="comment">#解压zip</span></span><br><span class="line"></span><br><span class="line">tar -cvf xxx.tar xxx							<span class="comment">#打包</span></span><br><span class="line">tar -czvf nc_yml.tar.gz *yml                    <span class="comment">#打包多个文件</span></span><br><span class="line">tar -xvf xxx.tar								<span class="comment">#解包</span></span><br><span class="line">tar -zxvf test.tar.gz -C /test   <span class="comment">#指定需要解压到的目录</span></span><br><span class="line"></span><br><span class="line">tar -zcvf xxx.tar.gz xxx						<span class="comment">#压缩</span></span><br><span class="line">tar -zxvf xxx.tar.gz 							<span class="comment">#解压缩</span></span><br><span class="line">tar -ztvf xxx.tar.gz							<span class="comment">#只查看不解压</span></span><br><span class="line"></span><br><span class="line">jar -xvf hello.jar								<span class="comment"># 解压</span></span><br><span class="line">jar -cvf0m hello.jar ./META-INF/MANIFEST.MF .	<span class="comment"># 压缩</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#清理服务器缓存</span></span><br><span class="line"><span class="built_in">sync</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"><span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"></span><br><span class="line"><span class="comment">#vi快捷指令</span></span><br><span class="line">Ctrl – h ：删除光标左方位置的字符</span><br><span class="line">Ctrl – d ：删除光标右方位置的字符（注意：当前命令行没有任何字符时，会注销系统或结束终端）</span><br><span class="line">Ctrl – w ：由光标位置开始，往左删除单词。往行首删</span><br><span class="line">Alt – d ：由光标位置开始，往右删除单词。往行尾删</span><br><span class="line">Ctrl – k ：由光标所在位置开始，删除右方所有的字符，直到该行结束。</span><br><span class="line">Ctrl – u ：由光标所在位置开始，删除左方所有的字符，直到该行开始。</span><br><span class="line">Ctrl – y ：粘贴之前删除的内容到光标后。</span><br><span class="line">ctrl – t ：交换光标处和之前两个字符的位置。</span><br><span class="line">Alt + . ：使用上一条命令的最后一个参数。</span><br><span class="line">Ctrl – _ ：回复之前的状态。撤销操作。</span><br><span class="line"></span><br><span class="line">:%s/A/B/g    <span class="comment">#vi 批量替换,把A替换成B</span></span><br><span class="line">:%s/192.168.51.227/192.168.51.206/g</span><br><span class="line">:%s/3306/13306/g</span><br><span class="line">:%s/bind_address=0.0.0.0/bind_address=::/g    				<span class="comment">#vi 批量替换</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">head</span> -n 200 filename   		<span class="comment">#查看文本文件头部n行 </span></span><br><span class="line"><span class="built_in">tail</span> -n 200 filename   		<span class="comment">#查看文本文件末尾n行</span></span><br><span class="line"><span class="built_in">wc</span> -l filename				<span class="comment">#查看文本文件行数</span></span><br><span class="line"><span class="built_in">tail</span> -200f kibana.log       </span><br><span class="line"><span class="built_in">head</span> -100 rc-tncm-biz_7206.log    <span class="comment">#显示文件开头前100行的内容</span></span><br><span class="line"></span><br><span class="line">[root@bjrdc5-cmc-nmdep-app05 jre]<span class="comment"># readlink -f $(which java)      #查找java安装路径</span></span><br><span class="line">/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.222.b10-0.el7_6.x86_64-debug/bin/java</span><br><span class="line"></span><br><span class="line">[root@bjrdc5-cmc-nmdep-app05 /]<span class="comment"># cd /home/</span></span><br><span class="line">[root@bjrdc5-cmc-nmdep-app05 home]<span class="comment"># du -sh *      #去相应目录下查看内存占用信息</span></span><br><span class="line">12K     centos</span><br><span class="line">33G     puaiuc</span><br><span class="line">104G    sftpuser</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> “content” &gt; 文件名   	 <span class="comment">#向文件中写入内容</span></span><br><span class="line"><span class="built_in">echo</span> “content” &gt;&gt; 文件名  	 <span class="comment">#向文件追加内容</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> &gt;和<span class="built_in">echo</span> &gt;&gt;的区别</span><br><span class="line">&gt; 输出重定向</span><br><span class="line">&gt;&gt; 输出追加重定向</span><br><span class="line"></span><br><span class="line">&gt; filename（文件名称） 							<span class="comment">#linux清空日志文件内容 比如log日志</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux 命令</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL InnoDB Cluster 部署手册</title>
    <url>/post/MySQL-InnoDB-Cluster-%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本次部署在IPV6和IPV4双栈网络环境下部署。采用InnoDB Cluster，每台服务器实例都运行MySQL Group Replication。MGR有两种模式，一种是Single-Primary，一种是Multi-Primary，即单主或者多主，本文使用的是Single-Primary模式</p>
<span id="more"></span>

<h1 id="逻辑部署图"><a href="#逻辑部署图" class="headerlink" title="逻辑部署图"></a>逻辑部署图</h1><p><img src="/post/MySQL-InnoDB-Cluster-%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/1637581706651-129d00f6-1a4f-46d8-b0d0-84f3500efc09.jpeg"></p>
<ol>
<li>上面这张图看着比较清楚，通过MySQL Shell可以配置出一个高可用自动进行故障转移的MySQL InnoDB Cluster，在后续运维过程中也可以通过MySQL Shell对集群进行状态监控及管理维护。通过MySQL Router向应用层屏蔽底层集群的细节，以应用层将普通的MySQL协议访问集群。</li>
<li>MySQL Group Replication 是最新GA的同步复制方式，具有以下特点：</li>
</ol>
<ul>
<li><p>支持单主和多主模式</p>
</li>
<li><p>基于Paxos算法，实现数据复制的一致性</p>
</li>
<li><p>插件化设计，支持插件检测，新增节点小于集群当前节点主版本号，拒绝加入集群，大于则加入，但无法作为主节点</p>
</li>
<li><p>没有第三方组件依赖</p>
</li>
<li><p>支持全链路SSL通讯</p>
</li>
<li><p>支持IP白名单</p>
</li>
<li><p>不依赖网络多播</p>
</li>
</ul>
<h1 id="搭建MySQL-InnoDB-Cluster"><a href="#搭建MySQL-InnoDB-Cluster" class="headerlink" title="搭建MySQL InnoDB Cluster"></a>搭建MySQL InnoDB Cluster</h1><h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><table>
<thead>
<tr>
<th>主机名</th>
<th>主机名称</th>
<th>操作系统</th>
<th>MySQL版本</th>
</tr>
</thead>
<tbody><tr>
<td>10.19.36.42</td>
<td>t1</td>
<td>CentOS Linux release 7.6.1810 (Core)</td>
<td>mysql-8.0.25-linux-glibc2.12-x86_64、mysql-router-8.0.25-linux-glibc2.12-x86_64、mysql-shell-8.0.25-linux-glibc2.12-x86-64bit</td>
</tr>
<tr>
<td>10.19.36.43</td>
<td>t2</td>
<td>CentOS Linux release 7.6.1810 (Core)</td>
<td>mysql-8.0.25-linux-glibc2.12-x86_64</td>
</tr>
<tr>
<td>10.19.36.44</td>
<td>t3</td>
<td>CentOS Linux release 7.6.1810 (Core)</td>
<td>mysql-8.0.25-linux-glibc2.12-x86_64</td>
</tr>
</tbody></table>
<h2 id="网络环境"><a href="#网络环境" class="headerlink" title="网络环境"></a>网络环境</h2><p>默认已具备IPV6网络的环境，此次部署三台服务器为IPV4和IPV6双栈网络，IPV6的子网掩码为fec0::&#x2F;48</p>
<table>
<thead>
<tr>
<th>IPV4</th>
<th>IPV6</th>
<th>Hostname</th>
</tr>
</thead>
<tbody><tr>
<td>10.19.36.42</td>
<td>fec0::a13:242a</td>
<td>t1</td>
</tr>
<tr>
<td>10.19.36.43</td>
<td>fec0::a13:242b</td>
<td>t2</td>
</tr>
<tr>
<td>10.19.36.44</td>
<td>fec0::a13:242c</td>
<td>t3</td>
</tr>
</tbody></table>
<h2 id="配置主机名称映射"><a href="#配置主机名称映射" class="headerlink" title="配置主机名称映射"></a>配置主机名称映射</h2><p>为保证三台虚拟机上可正常通过名称解析到对方的IP，这里将<strong>主机名称映射必做写入三台主机的hosts文件中</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat &lt;&lt; EOF &gt;&gt; /etc/hosts</span><br><span class="line">fec0::a13:242a t1</span><br><span class="line">fec0::a13:242b t2</span><br><span class="line">fec0::a13:242c t3</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>如果不配置此项，后续将节点添加至集群中，会报无法解析IP对应的主机名，从而未配置的主机无法添加至集群中。</p>
<h2 id="MySQL-部署"><a href="#MySQL-部署" class="headerlink" title="MySQL 部署"></a>MySQL 部署</h2><p>可以参考上一篇文章<span class="exturl" data-url="aHR0cDovL2xlbW5hLmNjL3Bvc3QvU2hlbGwlRTglODQlOUElRTYlOUMlQUMlRTglODclQUElRTUlOEElQTglRTklODMlQTglRTclQkQlQjIlRTQlQkElOEMlRTglQkYlOUIlRTUlODglQjZNeVNRTCVFNiU5NSVCMCVFNiU4RCVBRSVFNSVCQSU5My8=">Shell脚本自动部署二进制MySQL数据库<i class="fa fa-external-link-alt"></i></span></p>
<p>需要注意的是需要将<strong>my.cnf</strong>文件中做略微修改来适配IPV6环境</p>
<p>1、添加  <strong>bind_address&#x3D; ::</strong>   匹配IPV6和IPV4双栈</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">port=3336</span><br><span class="line">socket=/home/mysqlg1/mysql-8.0.25-linux-glibc2.12-x86_64/mysqld.sock</span><br><span class="line"><span class="comment">#default-character-set=utf8</span></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment">#匹配双栈</span></span><br><span class="line">bind_address= ::</span><br><span class="line">port= 3336</span><br><span class="line"><span class="comment">#数据库最大连接数</span></span><br><span class="line">max_connections = 3000 </span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>2、将之前IPV4的地址改成IPV6；打开访问数据库白名单，配置为IPV6的子网掩码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##########################mgr set##############################</span></span><br><span class="line"><span class="comment">#数据库会根据port自动生成，在port后面增加0；不建议随便改</span></span><br><span class="line">mysqlx_port=33660</span><br><span class="line">mysqlx_socket=/home/mysqlg1/mysql-8.0.25-linux-glibc2.12-x86_64/mysqlx.sock</span><br><span class="line">loose-group_replication_group_name=<span class="string">&quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa&quot;</span></span><br><span class="line">loose-group_replication_start_on_boot=off</span><br><span class="line"><span class="comment">#数据组复制端口，建议在port后面加1；此为IP为本机IP地址</span></span><br><span class="line">loose-group_replication_local_address= <span class="string">&quot;[fec0::a13:242a]:33661&quot;</span></span><br><span class="line"><span class="comment">#复制组的集群信息</span></span><br><span class="line"><span class="comment">#集群中所有数据库节点需要配置（此处无须配置本机的端口）</span></span><br><span class="line">loose-group_replication_group_seeds= <span class="string">&quot;[fec0::a13:242b]:33661,[fec0::a13:242c]:33661&quot;</span></span><br><span class="line">loose-group_replication_bootstrap_group= off</span><br><span class="line"><span class="comment">#访问数据库白名单，配置IPV6的子网掩码</span></span><br><span class="line">loose-group_replication_ip_whitelist=<span class="string">&quot;fec0::/48&quot;</span> </span><br><span class="line">loose-group_replication_single_primary_mode = on</span><br><span class="line">loose-group_replication_transaction_size_limit=1500000000</span><br></pre></td></tr></table></figure>

<h2 id="MySQL-Shell配置集群"><a href="#MySQL-Shell配置集群" class="headerlink" title="MySQL Shell配置集群"></a>MySQL Shell配置集群</h2><p>此处默认您已将三个服务器的MySQL数据库都已搭建完成，MySQL数据库端口为3366，root密码为123456</p>
<p>MYSQL CLUSTER集群通过MYSQL SHELL进行初始化，并创建集群</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar –vxf mysql-shell-8.0.25-linux-glibc2.12-x86-64bit.tar.gz</span><br><span class="line">cd mysql-shell-8.0.25-linux-glibc2.12-x86-64bit</span><br></pre></td></tr></table></figure>

<h3 id="通过MYSQL-SHELL检查主机状态"><a href="#通过MYSQL-SHELL检查主机状态" class="headerlink" title="通过MYSQL SHELL检查主机状态"></a>通过MYSQL SHELL检查主机状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/mysqlsh --no-password</span><br><span class="line">dba.checkInstanceConfiguration(<span class="string">&#x27;root@t1:3366&#x27;</span>,&#123;<span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;interactive&#x27;</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">dba.checkInstanceConfiguration(<span class="string">&#x27;root@t2:3366&#x27;</span>,&#123;<span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;interactive&#x27;</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">dba.checkInstanceConfiguration(<span class="string">&#x27;root@t3:3366&#x27;</span>,&#123;<span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;interactive&#x27;</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">node: 返回 ok说明实例正常</span><br></pre></td></tr></table></figure>

<p><img src="/post/MySQL-InnoDB-Cluster-%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/image-20220420153656973.png"></p>
<h3 id="创建MYSQL-Cluster名称"><a href="#创建MYSQL-Cluster名称" class="headerlink" title="创建MYSQL Cluster名称"></a>创建MYSQL Cluster名称</h3><p>MYSQL SHELL只需要在任意一塔主机机上进行操作就可以了。</p>
<p>创建MYSQL CLUSTER集群</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./bin/mysqlsh --no-password</span><br><span class="line">#登录任意一台主机MYSQL服务</span><br><span class="line">shell.connect(&#x27;root@[fec0::a13:242a]:3366&#x27;, &#x27;123456&#x27;)  </span><br><span class="line">dba.createCluster(&#x27;mycluster&#x27;, &#123;&#x27;localAddress&#x27;: &#x27;[fec0::a13:242a]&#x27;&#125;) </span><br><span class="line">#创建集群名称为&#x27;mycluster&#x27;，指定MYSQL的IP地址</span><br></pre></td></tr></table></figure>

<p><img src="/post/MySQL-InnoDB-Cluster-%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/image-20220420153806063.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#进入&#x27; mycluster &#x27;集群 执行该命令以后才能配置集群</span><br><span class="line">var cluster=dba.getCluster(&#x27;mycluster&#x27;)</span><br><span class="line">#检查集群状态</span><br><span class="line">cluster.status();</span><br></pre></td></tr></table></figure>

<p><img src="/post/MySQL-InnoDB-Cluster-%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/image-20220420153845769.png"></p>
<h3 id="增加slave1节点"><a href="#增加slave1节点" class="headerlink" title="增加slave1节点"></a>增加slave1节点</h3><p>节点加入的时候会导致原来的数据库shutdown，如果没有设置全局环境变量，就需要手动启动下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/mysqlsh --no-password</span><br><span class="line"><span class="comment">#需要连接到主节点进行操作</span></span><br><span class="line">var cluster=dba.getCluster(<span class="string">&#x27;mycluster&#x27;</span>)</span><br><span class="line">shell.connect(<span class="string">&#x27;root@[fec0::a13:242a]:3366&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="comment">#（秒，默认60），在恢复操作期间等待事务应用的时间，如果向运行一段时间的集群中新增节点时，建议此时间设置大点，否则如下节点增加集群会报超时错误。</span></span><br><span class="line">shell.options[<span class="string">&#x27;dba.restartWaitTimeout&#x27;</span>]=7200 </span><br><span class="line">cluster.addInstance(<span class="string">&#x27;root@[fec0::a13:242b]:3366&#x27;</span>, &#123;<span class="string">&#x27;localAddress&#x27;</span>: <span class="string">&#x27;[fec0::a13:242b]&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;recoveryMethod&#x27;</span>:<span class="string">&#x27;clone&#x27;</span>,<span class="string">&#x27;waitRecovery&#x27;</span>:<span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">cluster.status();</span><br></pre></td></tr></table></figure>

<p><img src="/post/MySQL-InnoDB-Cluster-%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/image-20220420154002968.png"></p>
<p><img src="/post/MySQL-InnoDB-Cluster-%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/image-20220420154018985.png"></p>
<p><img src="/post/MySQL-InnoDB-Cluster-%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/image-20220420154025830.png"></p>
<h3 id="增加slave2节点"><a href="#增加slave2节点" class="headerlink" title="增加slave2节点"></a>增加slave2节点</h3><p>节点加入的时候会导致原来的数据库shutdown，如果没有设置全局环境变量，就需要手动启动下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./bin/mysqlsh --no-password</span><br><span class="line">#需要连接到主节点进行操作</span><br><span class="line">var cluster=dba.getCluster(&#x27;mycluster&#x27;)</span><br><span class="line">shell.connect(&#x27;root@[fec0::a13:242a]:3366&#x27;, &#x27;123456&#x27;)</span><br><span class="line">#（秒，默认60），在恢复操作期间等待事务应用的时间，如果向运行一段时间的集群中新增节点时，建议此时间设置大点，否则如下节点增加集群会报超时错误。</span><br><span class="line">shell.options[&#x27;dba.restartWaitTimeout&#x27;]=7200 </span><br><span class="line">cluster.addInstance(&#x27;root@[fec0::a13:242c]:3366&#x27;, &#123;&#x27;localAddress&#x27;: &#x27;[fec0::a13:242c]&#x27;, &#x27;password&#x27;: &#x27;123456&#x27;,&#x27;recoveryMethod&#x27;:&#x27;clone&#x27;,&#x27;waitRecovery&#x27;:&#x27;1&#x27;&#125;)</span><br><span class="line">cluster.status();</span><br></pre></td></tr></table></figure>

<h3 id="检查集群状态"><a href="#检查集群状态" class="headerlink" title="检查集群状态"></a>检查集群状态</h3><p><code>cluster.status();</code></p>
<p><img src="/post/MySQL-InnoDB-Cluster-%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/image-20220420154253447.png"></p>
<h2 id="MySQL-Router"><a href="#MySQL-Router" class="headerlink" title="MySQL Router"></a>MySQL Router</h2><h3 id="MySQL-Router-说明"><a href="#MySQL-Router-说明" class="headerlink" title="MySQL Router 说明"></a>MySQL Router 说明</h3><p>​        MySQL Router是MySQL官方推出的一个轻量级MySQL中间件是处于应用client和dbserver之间的轻量级代理程序，它能检测，分析和转发查询到后端数据库实例，并把结果返回给client。是mysql-proxy的一个替代品.但是和mysql-proxy有区别。mysqlroute使用了两个端口进行读写分离</p>
<table>
<thead>
<tr>
<th>默认端口号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>6446</td>
<td>默认是读写端口</td>
<td>mode  &#x3D; read-write默认情况下第一台主数据库为写主库，当第一台主数据库DOWN机后，第二台数据库被提升为主库,如果第一台不出问题，第二台是不会被使用的。可以作高可用使用</td>
</tr>
<tr>
<td>6447</td>
<td>默认是读端口</td>
<td>如果设置以后，根据设置的列表进行轮询使用</td>
</tr>
</tbody></table>
<p>​        MySQL Router接受前端应用程序请求后，根据不同的端口来区分读写，把连接读写端口的所有写和查询发往主库，把连接只读端口的查询以轮询方式发往多个从库，从而实现读写分离的目的。读写返回的结果会交给MySQL Router,由MySQL Router返回给客户端的应用程序。<br>​        我理解的是mysql-proxy在使用的时候与连接单台数据库操作一样，而mysql route则是把多台主机的读写集中在一起，进行读写分离，在使用的时候还是需要程序进行改动。</p>
<h3 id="初始化MySQL-Router"><a href="#初始化MySQL-Router" class="headerlink" title="初始化MySQL Router"></a>初始化MySQL Router</h3><p>​        MYSQL router是基于MYSQL服务之上的路由层，用于应用程序来访问数据库，向应用层屏蔽底层集群的细节，可以实现读写分析，我们还可以在三台虚拟机上均部署mysql-router，用于高可用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 以当前集群信息创建mysql-router的配置信息，注意这里密码 123456</span><br><span class="line">$tar –vxf mysql-router-8.0.25-linux-glibc2.12-x86_64.tar</span><br><span class="line">$ cd mysql-router-8.0.25-linux-glibc2.12-x86_64</span><br></pre></td></tr></table></figure>

<p>初始化router的配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在当前用户下生产router的启动脚本和配置文件</span><br><span class="line">./bin/mysqlrouter --bootstrap root:123456@[fec0::a13:242a]:3366 --directory=$&#123;MYSQLRT_HOME&#125;/aiclster1 --conf-use-sockets --force --user=$&#123;USER&#125;</span><br><span class="line">注：</span><br><span class="line">如上root为MYSQL MGR数据库的管理员账号，123456为数据库管理员密码。</span><br><span class="line">如上的[fec0::a13:242a]数据库MGR的主节点的IP地址，3366为数据库MGR主节点的服务端口；</span><br><span class="line">如上的aiclster1建议设置为数据库MGR的的集群名称，方便后续应用识别使用；</span><br><span class="line">执行如上命令后，如果能够正常连接到MYSQL MGR的主节点，则会显示如下的信息，至少会在指定目录中生成mysqlrouter.conf文件；否则会提示连接数据库失败；</span><br></pre></td></tr></table></figure>

<p><img src="/post/MySQL-InnoDB-Cluster-%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/image-20220420162628768.png"></p>
<h3 id="修改MySQL-Router配置"><a href="#修改MySQL-Router配置" class="headerlink" title="修改MySQL Router配置"></a>修改MySQL Router配置</h3><p><strong>添加双栈</strong></p>
<p><strong>mysql-router-8.0.25-linux-glibc2.12-x86_64&#x2F;aiclster1&#x2F;mysqlrouter.conf</strong>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">........  </span><br><span class="line">bind_address = ::</span><br><span class="line">........  </span><br><span class="line"># 修改mysqlrouter.conf原文件中bind_address=0.0.0.0为::</span><br><span class="line">即 %s/bind_address=0.0.0.0/bind_address=::/g  </span><br></pre></td></tr></table></figure>

<p><img src="/post/MySQL-InnoDB-Cluster-%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/image-20220420162833513.png"></p>
<h3 id="启动-MySQL-Router"><a href="#启动-MySQL-Router" class="headerlink" title="启动 MySQL Router"></a>启动 MySQL Router</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd /home/mysqlg1/mysql-router</span><br><span class="line">$ ./start.sh</span><br><span class="line">检查端口和进程</span><br><span class="line">ps -ef |grep router</span><br></pre></td></tr></table></figure>

<h3 id="部署验证"><a href="#部署验证" class="headerlink" title="部署验证"></a>部署验证</h3><p>至此整套MySQL InnoDB Cluster就部署好了，我们在其它节点以MySQL协议即可访问该MySQL集群。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -hfec0::a13:242a -P6446 -uroot -p123456</span><br><span class="line">或者</span><br><span class="line">mysql -h10.19.36.42 -P6446 -uroot -p123456</span><br></pre></td></tr></table></figure>

<p><img src="/post/MySQL-InnoDB-Cluster-%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/image-20220420162953966.png"></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL 安装</tag>
        <tag>Shell 脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell脚本自动部署二进制MySQL数据库</title>
    <url>/post/Shell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BA%8C%E8%BF%9B%E5%88%B6MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>该Shell脚本为MySQL Cluster集群中自动部署二进制包MySQL数据库，配置参数为集群参数，可修改成单节点配置，脚本还有功能尚未完成，但依旧不影响使用。</p>
<span id="more"></span>

<h1 id="脚本的逻辑"><a href="#脚本的逻辑" class="headerlink" title="脚本的逻辑"></a>脚本的逻辑</h1><ul>
<li>数据库二进制安装</li>
<li>系统环境配置</li>
<li>数据库配置文件my.cnf配置</li>
<li>数据库初始化</li>
<li>安装完成<br>该脚本部署用户为普通用户，且没有重新添加MySQL用户，可选择是否新建使用MySQL用户安装</li>
</ul>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="部署脚本"><a href="#部署脚本" class="headerlink" title="部署脚本"></a>部署脚本</h2><p><strong>使用前需根据情况修改配置参数</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#mysql二进制自动安装脚本</span></span><br><span class="line"><span class="comment">#注意：本脚本是用普通用户安装!!!</span></span><br><span class="line"><span class="comment">#1.如果部署MySQL集群时，为保证三台虚拟机上可正常通过名称解析到对方的IP，这里将主机名称映射必做写入三台主机的hosts文件中，需使用|root用户|添加主机名映射，部署单节点的话忽略</span></span><br><span class="line"><span class="comment">#cat &lt;&lt; EOF &gt;&gt; /etc/hosts</span></span><br><span class="line"><span class="comment">#10.19.36.42   t1</span></span><br><span class="line"><span class="comment">#10.19.36.43   t2</span></span><br><span class="line"><span class="comment">#10.19.36.44   t3</span></span><br><span class="line"><span class="comment">#EOF</span></span><br><span class="line"><span class="comment">#2.在Redhat/CentOS7及以上版本操作系统安装，会默认安装mysql数据库，并自带生成/etc/my.cnf文件，为了方便编辑和管理，我们一般会使用|root用户|将/etc/my.cnf更名为/etc/my.cnfbak，mv /etc/my.cnf /etc/my.cnfbak</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装数据库用户</span></span><br><span class="line">USER=kousq</span><br><span class="line"><span class="comment">#MySQL安装包名</span></span><br><span class="line">BIN_PKG=mysql-8.0.25-linux-glibc2.12-x86_64.tar.xz</span><br><span class="line"><span class="comment">#MySQL安装目录，根据情况自行修改</span></span><br><span class="line">BASE_DIR=/data/test</span><br><span class="line"><span class="comment">#安装包的存放目录</span></span><br><span class="line">BIN_PKG_DIR=<span class="variable">$BASE_DIR</span>/<span class="variable">$BIN_PKG</span></span><br><span class="line"><span class="comment">#MySQL解压后路径</span></span><br><span class="line">MYSQL_PATH=<span class="variable">$BASE_DIR</span>/<span class="variable">$&#123;BIN_PKG%.tar*&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########|my.cnf配置参数|##########</span></span><br><span class="line"><span class="comment">#数据库端口</span></span><br><span class="line">MYSQL_PORT=3306</span><br><span class="line"><span class="comment">#数据库会根据port自动生成，在port后面增加0</span></span><br><span class="line">MYSQLX_PORT=33060</span><br><span class="line"><span class="comment">#根据机器进行调整,操作系统内存的70%-80%最佳</span></span><br><span class="line">BUFFER_POOL_SIZE=20G</span><br><span class="line"><span class="comment">#集群中每个节点的ID不允许重复，否则报错，可设置为IP最后一位</span></span><br><span class="line">SERVER_ID=44</span><br><span class="line"><span class="comment">#数据组复制端口，建议在port后面加1；此为IP为本机IP地址</span></span><br><span class="line">GROUP_REPLICATION_LOCAL_ADDRESS=10.19.36.44:33061</span><br><span class="line"><span class="comment">#集群中所有数据库节点需要配置（此处无须配置本机的端口）</span></span><br><span class="line">GROUP_REPLICATION_GROUP_SEEDS=10.19.36.42:33061,10.19.36.43:33061</span><br><span class="line"><span class="comment"># 导入和导出操作专用目录,该目录需要提前先建好</span></span><br><span class="line">SECURE_FILE_PRIV=<span class="variable">$BASE_DIR</span>/dumpdir</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">log_output</span></span>() &#123;</span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;[INFO][<span class="subst">$(date +<span class="string">&quot;%F %T&quot;</span>)</span>] <span class="variable">$1</span> 成功!&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;[ERROR][<span class="subst">$(date +<span class="string">&quot;%F %T&quot;</span>)</span>] <span class="variable">$1</span> 失败! 已退出安装&quot;</span></span><br><span class="line">    <span class="built_in">exit</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">install_mysql</span></span>() &#123;</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;正在安装<span class="variable">$&#123;BIN_PKG%.tar*&#125;</span>...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 mysql用户、组</span></span><br><span class="line"><span class="comment">#if ! grep -q &#x27;^mysql:&#x27; /etc/passwd ;then</span></span><br><span class="line"><span class="comment">#  useradd  -s /sbin/nologin -d $MYSQL_PATH mysql</span></span><br><span class="line"><span class="comment">#  log_output &quot;创建mysql用户&quot;</span></span><br><span class="line"><span class="comment">#fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压tar包到/usr/local/目录下</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;mysql二进制包正解压到<span class="variable">$&#123;BASE_DIR&#125;</span>目录下&quot;</span></span><br><span class="line">xz -d <span class="variable">$BIN_PKG</span>  &amp;&amp; tar -vxf <span class="variable">$&#123;BIN_PKG%.xz*&#125;</span> -C <span class="variable">$BASE_DIR</span></span><br><span class="line">log_output <span class="string">&quot;mysql二进制包解压&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置mysqld服务的环境变量</span></span><br><span class="line">result=`<span class="built_in">cat</span> ~/.bash_profile | grep mysql`</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$result</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="comment">#echo &quot;MYSQL_HOME=$MYSQL_PATH/bin:$PATH&quot; &gt;&gt; ~/.bash_profile &amp;&amp; source ~/.bash_profile</span></span><br><span class="line">  sed -i <span class="string">&quot;/^PATH/i export MYSQL_HOME=&#x27;<span class="variable">$MYSQL_PATH</span>&#x27;&quot;</span> -i ~/.bash_profile</span><br><span class="line">  sed -i <span class="string">&#x27;/^PATH/ s/$/:$&#123;MYSQL_HOME&#125;\/bin/&#x27;</span> ~/.bash_profile</span><br><span class="line">  <span class="built_in">source</span> ~/.bash_profile</span><br><span class="line">  log_output <span class="string">&quot;配置mysqld服务的环境变量&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;检测到mysqld服务的环境变量已配置好&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在部署用户目录下创建配置文件 ~/.my.cnf</span></span><br><span class="line"><span class="built_in">cat</span> &gt; ~/.my.cnf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[client]</span></span><br><span class="line"><span class="string">port=$&#123;MYSQL_PORT&#125;</span></span><br><span class="line"><span class="string">socket=$&#123;MYSQL_PATH&#125;/mysqld.sock</span></span><br><span class="line"><span class="string">default-character-set=utf8mb4</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">port= $&#123;MYSQL_PORT&#125;</span></span><br><span class="line"><span class="string">#数据库最大连接数</span></span><br><span class="line"><span class="string">max_connections = 3000 </span></span><br><span class="line"><span class="string">max_connect_errors = 300</span></span><br><span class="line"><span class="string">datadir=$&#123;MYSQL_PATH&#125;/data</span></span><br><span class="line"><span class="string">socket=$&#123;MYSQL_PATH&#125;/mysqld.sock</span></span><br><span class="line"><span class="string">basedir=$&#123;MYSQL_PATH&#125;</span></span><br><span class="line"><span class="string">log-error=$&#123;MYSQL_PATH&#125;/mysqld.log</span></span><br><span class="line"><span class="string">pid-file=$&#123;MYSQL_PATH&#125;/mysqld.pid</span></span><br><span class="line"><span class="string">default-time-zone = &#x27;+08:00&#x27;</span></span><br><span class="line"><span class="string">lower_case_table_names = 1                                # 忽略大小写</span></span><br><span class="line"><span class="string">enforce_gtid_consistency = ON</span></span><br><span class="line"><span class="string">gtid_mode = ON</span></span><br><span class="line"><span class="string">binlog_checksum  = none</span></span><br><span class="line"><span class="string">default_authentication_plugin = mysql_native_password</span></span><br><span class="line"><span class="string">skip-name-resolve = ON</span></span><br><span class="line"><span class="string"># open_files_limit does not take effect</span></span><br><span class="line"><span class="string">open_files_limit = 65535                                  # 可用的文件描述符数</span></span><br><span class="line"><span class="string">table_open_cache = 2000</span></span><br><span class="line"><span class="string">#For safe write dir</span></span><br><span class="line"><span class="string">local_infile = 0</span></span><br><span class="line"><span class="string">#导入和导出操作专用目录,该目录需要提前先建好</span></span><br><span class="line"><span class="string">secure_file_priv = $&#123;SECURE_FILE_PRIV&#125;</span></span><br><span class="line"><span class="string">#################innodb########################</span></span><br><span class="line"><span class="string">innodb_data_home_dir = $&#123;MYSQL_PATH&#125;/data</span></span><br><span class="line"><span class="string">innodb_data_file_path = ibdata1:512M;ibdata2:512M:autoextend</span></span><br><span class="line"><span class="string">#根据机器进行调整,操作系统内存的70%-80%最佳</span></span><br><span class="line"><span class="string">innodb_buffer_pool_size = $&#123;BUFFER_POOL_SIZE&#125;</span></span><br><span class="line"><span class="string">innodb_flush_log_at_trx_commit = 2</span></span><br><span class="line"><span class="string">innodb_io_capacity = 2500</span></span><br><span class="line"><span class="string">innodb_lock_wait_timeout = 120</span></span><br><span class="line"><span class="string">innodb_log_buffer_size = 1G</span></span><br><span class="line"><span class="string">innodb_log_file_size = 2G</span></span><br><span class="line"><span class="string">innodb_log_files_in_group = 3</span></span><br><span class="line"><span class="string">innodb_max_dirty_pages_pct = 75</span></span><br><span class="line"><span class="string">innodb_read_io_threads = 6</span></span><br><span class="line"><span class="string">innodb_write_io_threads = 6</span></span><br><span class="line"><span class="string">innodb_thread_concurrency = 18</span></span><br><span class="line"><span class="string">innodb_file_per_table = 1</span></span><br><span class="line"><span class="string">innodb_flush_neighbors=1</span></span><br><span class="line"><span class="string">innodb_rollback_on_timeout</span></span><br><span class="line"><span class="string">innodb_undo_directory = $&#123;MYSQL_PATH&#125;/data                    # 重做日志文件的目录路径（最好是 SSD 盘）</span></span><br><span class="line"><span class="string">innodb_log_group_home_dir = $&#123;MYSQL_PATH&#125;/data</span></span><br><span class="line"><span class="string">###################session###########################</span></span><br><span class="line"><span class="string">join_buffer_size = 8M</span></span><br><span class="line"><span class="string">key_buffer_size = 256M                                        # MyISAM 索引块的缓冲区大小</span></span><br><span class="line"><span class="string">bulk_insert_buffer_size = 32M</span></span><br><span class="line"><span class="string">max_heap_table_size = 1G</span></span><br><span class="line"><span class="string">tmp_table_size = 1G</span></span><br><span class="line"><span class="string">read_buffer_size = 32M</span></span><br><span class="line"><span class="string">sort_buffer_size = 32M</span></span><br><span class="line"><span class="string">max_allowed_packet = 1G</span></span><br><span class="line"><span class="string">read_rnd_buffer_size = 32M</span></span><br><span class="line"><span class="string">############log set###################</span></span><br><span class="line"><span class="string">#集群中每个节点的ID不允许重复，否则报错</span></span><br><span class="line"><span class="string">server_id = $&#123;SERVER_ID&#125;</span></span><br><span class="line"><span class="string">log-error = mysqld.err</span></span><br><span class="line"><span class="string">log-bin = binlog</span></span><br><span class="line"><span class="string">log_bin_index = binlog.index</span></span><br><span class="line"><span class="string">max_binlog_size = 2G</span></span><br><span class="line"><span class="string">slow_query_log_file = $&#123;MYSQL_PATH&#125;/slow.log</span></span><br><span class="line"><span class="string">slow_query_log = 1</span></span><br><span class="line"><span class="string">long_query_time = 10</span></span><br><span class="line"><span class="string">log_queries_not_using_indexes = ON</span></span><br><span class="line"><span class="string">log_throttle_queries_not_using_indexes = 10</span></span><br><span class="line"><span class="string">log_slow_admin_statements = ON</span></span><br><span class="line"><span class="string">log_output = FILE,TABLE</span></span><br><span class="line"><span class="string">#master_info_file = $&#123;MYSQL_PATH&#125;/master.info</span></span><br><span class="line"><span class="string">master_info_repository=TABLE</span></span><br><span class="line"><span class="string">log_slave_updates=ON</span></span><br><span class="line"><span class="string">binlog_format=ROW</span></span><br><span class="line"><span class="string">binlog_rows_query_log_events=ON</span></span><br><span class="line"><span class="string">wait_timeout=28800                            # 服务器在关闭非交互式连接之前等待活动的秒数(默认8小时)</span></span><br><span class="line"><span class="string">slave_parallel_workers=48</span></span><br><span class="line"><span class="string">slave_parallel_type=LOGICAL_CLOCK</span></span><br><span class="line"><span class="string">slave_pending_jobs_size_max=1G</span></span><br><span class="line"><span class="string">slave_preserve_commit_order=ON</span></span><br><span class="line"><span class="string"># add new 20210706</span></span><br><span class="line"><span class="string">slave_compressed_protocol=ON</span></span><br><span class="line"><span class="string">transaction_isolation=&#x27;read-committed&#x27;</span></span><br><span class="line"><span class="string">innodb_buffer_pool_instances=64</span></span><br><span class="line"><span class="string">relay_log_info_repository=TABLE</span></span><br><span class="line"><span class="string">##########################mgr set##############################</span></span><br><span class="line"><span class="string">#数据库会根据port自动生成，在port后面增加0；不建议随便改</span></span><br><span class="line"><span class="string">mysqlx_port=$&#123;MYSQLX_PORT&#125;</span></span><br><span class="line"><span class="string">mysqlx_socket=$&#123;MYSQL_PATH&#125;/mysqlx.sock</span></span><br><span class="line"><span class="string">loose-group_replication_group_name=&quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa&quot;</span></span><br><span class="line"><span class="string">loose-group_replication_start_on_boot=off</span></span><br><span class="line"><span class="string">#数据组复制端口，建议在port后面加1；此为IP为本机IP地址</span></span><br><span class="line"><span class="string">loose-group_replication_local_address= &quot;$&#123;GROUP_REPLICATION_LOCAL_ADDRESS&#125;&quot;</span></span><br><span class="line"><span class="string">#复制组的集群信息</span></span><br><span class="line"><span class="string">#集群中所有数据库节点需要配置（此处无须配置本机的端口）</span></span><br><span class="line"><span class="string">loose-group_replication_group_seeds= &quot;$&#123;GROUP_REPLICATION_GROUP_SEEDS&#125;&quot;</span></span><br><span class="line"><span class="string">loose-group_replication_bootstrap_group= off</span></span><br><span class="line"><span class="string">#loose-group_replication_ip_whitelist=&quot;10.12.0.0/16&quot; #访问数据库白名单</span></span><br><span class="line"><span class="string">loose-group_replication_single_primary_mode = on</span></span><br><span class="line"><span class="string">loose-group_replication_transaction_size_limit=1500000000</span></span><br><span class="line"><span class="string"># 组复制节点权重，权重越大，则主节点数据库异常就由集群中权重大接管主节点,建议是70-100</span></span><br><span class="line"><span class="string">loose-group_replication_member_weight=100 </span></span><br><span class="line"><span class="string">transaction_write_set_extraction = XXHASH64</span></span><br><span class="line"><span class="string">binlog_transaction_dependency_tracking  = WRITESET</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#MySQL导入和导出操作专用目录</span></span><br><span class="line"><span class="built_in">mkdir</span> <span class="variable">$BASE_DIR</span>/dumpdir  &amp;&amp; <span class="built_in">chmod</span> 755 <span class="variable">$BASE_DIR</span>/dumpdir</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改数据库管理程序的参数</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line">sed -e <span class="string">&#x27;s/^basedir=/basedir=$&#123;MYSQL_HOME&#125;/g&#x27;</span> -e <span class="string">&#x27;s+^datadir=+datadir=$&#123;MYSQL_HOME&#125;/data+g&#x27;</span> -i <span class="variable">$&#123;MYSQL_HOME&#125;</span>/support-files/mysql.server</span><br><span class="line"></span><br><span class="line"><span class="comment">#mysqld服务初始化，设置默认密码为空则将--initialize选项替换为--initialize-insecure选项</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line">mysqld --initialize-insecure  --user=<span class="variable">$&#123;USER&#125;</span> --basedir=<span class="variable">$&#123;MYSQL_HOME&#125;</span> --datadir=<span class="variable">$&#123;MYSQL_HOME&#125;</span>/data --log_error=<span class="variable">$&#123;MYSQL_HOME&#125;</span>/mysql-error.log</span><br><span class="line">log_output <span class="string">&quot;mysql初始化完成(密码为空)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动mysqld服务</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile &amp;&amp; <span class="built_in">cd</span> <span class="variable">$&#123;MYSQL_HOME&#125;</span>/bin &amp;&amp; ./mysqld start </span><br><span class="line"></span><br><span class="line"><span class="comment">#启动mysql程序</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile &amp;&amp; <span class="built_in">cd</span> <span class="variable">$&#123;MYSQL_HOME&#125;</span>/support-files &amp;&amp; ./mysql.server start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">install_mysql</span><br><span class="line">log_output <span class="string">&quot;命令行输入mysql -uroot -A 实现登录数据库&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><p><img src="/post/Shell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BA%8C%E8%BF%9B%E5%88%B6MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220414095455346.png" alt="image-20220414095455346"></p>
<p><img src="/post/Shell%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BA%8C%E8%BF%9B%E5%88%B6MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220414095719427.png" alt="image-20220414095719427"></p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="修改主机参数配置"><a href="#修改主机参数配置" class="headerlink" title="修改主机参数配置"></a>修改主机参数配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">echo &quot;net.ipv4.tcp_timestamps=1&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_tw_recycle=1&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_tw_reuse=1&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;vm.min_free_kbytes=1024000&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_timestamps=1&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_tw_recycle=1&quot; &gt;&gt; /etc/sysctl.conf </span><br><span class="line">echo &quot;net.ipv4.tcp_tw_reuse=1&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;vm.min_free_kbytes=1024000&quot; &gt;&gt; /etc/sysctl.conf </span><br><span class="line">echo &quot;net.ipv4.tcp_timestamps=1&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_tw_recycle=1&quot; &gt;&gt; /etc/sysctl.conf </span><br><span class="line">echo &quot;net.ipv4.tcp_tw_reuse=1&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;vm.min_free_kbytes=1024000&quot; &gt;&gt; /etc/sysctl.conf </span><br><span class="line">echo &quot;net.core.somaxconn = 3000&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.core.netdev_max_backlog = 65535&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_max_syn_backlog = 65535&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_fin_timeout = 10&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.core.wmem_max = 16777216&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.core.rmem_max = 16777216&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_keepalive_time = 120&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_keepalive_intvl = 30&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_keepalive_probes = 3&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;vm.swappiness = 0&quot; &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#/etc/security/limits.conf</span><br><span class="line"></span><br><span class="line">* hard   nproc    65535</span><br><span class="line">* soft   nproc    65535</span><br><span class="line">* hard   nofile   65535</span><br><span class="line">* soft   nofile   65535</span><br><span class="line">* hard   stack    20240</span><br><span class="line">* soft   stack    10240</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL 安装</tag>
        <tag>Shell 脚本</tag>
      </tags>
  </entry>
</search>
